---
title: "HW 01"
author: "Weston Scott"
format: 
  html:
    embed-resources: true
toc: true
editor:
  render-on-save: true
execute:
  warning: false
bibliography: references.bib
---

## 0 - Setup

```{r library_setup}
if (!require("pacman")) 
    install.packages("pacman")

# Use pacman::p_load to install and load CRAN packages
pacman::p_load(
      dplyr,
      ggplot2,
      ggthemes,
      glue,
      grid,
      gridExtra,
      knitr,
      lubridate,
      openintro,
      readr,
      scales
)

# Handle GitHub package separately
if (!require("dsbox")) {
      # Install devtools if not present
      if (!require("devtools")) 
          install.packages("devtools")
devtools::install_github("tidyverse/dsbox")
      library(dsbox)
}
```

## 1 - Road traffic accidents in Edinburgh

```{r 1_load_data}
accidents <- read_csv("data/accidents.csv")
glimpse(accidents)
```

```{r mutate_data_part_1}
accidents <- accidents |>
    mutate(
        time_hour = hour(hms(time)) + 
                    minute(hms(time)) / 60, ## Convert to decimal hours
        
        day_type = case_when(day_of_week %in% c("Saturday", 
                                                "Sunday") ~ "Weekend", 
                             TRUE ~ "Weekday"),
        
    severity = factor(severity, 
                      levels = c("Fatal", 
                                 "Serious", 
                                 "Slight"))
    ) |>

    filter(!is.na(time_hour)) ## Clean up NaNs
```

```{r plot_part_1}
ggplot(accidents, 
       aes(x = time_hour * 3600, 
           fill = severity)) +

    geom_density(alpha = 0.5) +
    facet_wrap(~ day_type, 
               ncol = 1) +

    scale_y_continuous(labels = scientific) +
    scale_x_continuous(breaks = seq(0, 24*3600, 
                                    by = 4*3600), 
                       labels = sprintf("%02d:00:00", 
                                        seq(0, 24, by = 4))) +

     scale_fill_manual(values = c("Fatal" = "purple4", 
                                  "Serious" = "steelblue3", 
                                  "Slight" = "yellow")) +

      labs(title = "Number of accidents throughout the day",
           subtitle = "By day of week and severity",
           x = "Time of day",
           y = "Density",
           fill = "Severity"
          ) +

    theme_minimal() +
    theme(legend.position = "right")
```

### Interpretation

The density plot illustrates the distribution of road traffic accidents in Edinburgh in 2018 across the day, separated by weekday and weekend, and categorized by severity. On weekdays, the density peaks around midday to afternoon, with "Slight" accidents dominating, while "Fatal" and "Serious" incidents are less frequent and more evenly distributed. On weekends, the peak shifts slightly later, with a higher concentration of "Slight" accidents in the afternoon and evening, possibly reflecting increased leisure travel. This pattern suggests that accident severity and timing vary with daily activity levels.

## 2 - NYC marathon winners

```{r 2_load_data}
marathon <- read_csv("data/nyc_marathon.csv")
glimpse(marathon)

marathon <- marathon |>
    filter(!is.na(time_hrs))
```

### Part a

```{r histogram_part_2a}
ggplot(data = marathon, 
       mapping = aes(x = time)) +

    geom_histogram() +
    labs(
        title = "Distribution of Marathon Times for NYC Marathon Winners",
        x = "Marathon Time (hours)",
        y = "Count"
    )
```

```{r boxplot_part_2a}
ggplot(data = marathon, 
       mapping = aes(x = time)) +

    geom_boxplot() +
    labs(
        title = "Box Plot of Marathon Times for NYC Marathon Winners",
        y = "Marathon Time (hours)",
        x = ""
    )
```

#### Features Apparent in Each Plot

The histogram and box plot reveal different aspects of the distribution of marathon times:

#### Features in the Histogram

The histogram shows the overall shape of the distribution (gaussian, etc.), including whether it’s unimodal or bimodal, and highlights the frequency of specific time ranges. These details about the distribution’s modality and density are not visible in the box plot.

#### Features in the Box Plot

The box plot emphasizes summary statistics, such as the median, interquartile range (IQR), and potential outliers. The quartile-based features and outliers are not explicitly shown in the histogram, which focuses on frequency rather than the statistical summaries of the data in question.

### Part b

```{r mutate_data_part_2b}
marathon <- marathon |>
    mutate(
        time_hours = as.numeric(hms(time)) / 3600
    )
```

```{r plot_part_2b}
ggplot(marathon, 
       aes(x = division, 
           y = time, 
           fill = division)) +

    geom_boxplot() +
    scale_fill_manual(values = c("Men" = "darkgreen", 
                               "Women" = "purple4")) +

    labs(
        title = "Marathon Times of NYC Marathon Winners by Gender",
        x = "Gender",
        y = "Marathon Time (hours)",
        fill = "Gender"
    )
```

#### Comparison

The box plot separating the men's and women's results inform that the men's average time is faster, though with outlier results for the men slower then the average women's time. It should be observed as well that the height spread of the green vs red in the plot demonstrates that the men have a tighter grouping of times to their mean compared to the women.

### Part c

**Redundancy**: The plot uses both the x-axis labels "Men" and "Women", and the legend "Gender" to convey the same information. The fill aesthetic maps to division (or gender), and the legend repeats what is already clear from the x-axis categories. Honestly, it could work even plotting the dataset as a whole and then the box-plots can be essentially inline, since they are in different regions, simply color the data by the gender as well.

```{r plot_part_2c}
ggplot(marathon, 
       aes(x = division, 
           y = time, 
           fill = division)) +

    geom_boxplot() +
    scale_fill_manual(values = c("Men" = "darkgreen", 
                               "Women" = "purple4")) +

    labs(
        title = "Marathon Times of NYC Marathon Winners by Gender",
        x = "Gender",
        y = "Marathon Time (hours)"
    ) +
    
    theme(legend.position = "none")
```

### Part d

```{r plot_part_2d}
ggplot(marathon, 
       aes(x = year, 
           y = time, 
           color = division, 
           shape = division)) +

    geom_point(size = 3) +
    geom_line() +
    scale_color_manual(values = c("Men" = "darkgreen", 
                                  "Women" = "purple4")) +

    scale_shape_manual(values = c("Men" = 16, 
                                  "Women" = 18)) + 

    labs(
        title = "Marathon Times of NYC Marathon Winners Over the Years",
        x = "Year",
        y = "Marathon Time (hours:minutes)",
        color = "Gender",
        shape = "Gender"
    )
```

#### Oberservations

The trends of both the men and women lines show that post 1980, the men and women both have stabilized around their respective averages. The plot also highlights year-to-year variability and anomalies (e.g., a spike in times in a specific year (more exploratory analysis could be done). Additionally, it allows direct comparison of men’s and women’s times across years, showing that men consistently have faster times. These temporal trends and comparative dynamics are not captured in the earlier plots (histogram or boxplot).

## 3 - US counties

```{r 3_load_data}
data(county)
glimpse(county)
```

### Part a

The code attempts to create a plot using geom_point and geom_boxplot, with an intent to explore the relationship between education level and income across counties for the geom_point plots, and then compare population distributions against smoking ban categories for the boxplots. This code will not render (or work) because it defines 2 aesthetics, which cause a conflict. Also the data in question between the two plots does not share any commonality, making the plot uninterpretable.

`ggplot(county) +   geom_point(aes(x = median_edu, y = median_hh_income)) +   geom_boxplot(aes(x = smoking_ban, y = pop2017))`

### Part b

The second plot makes it easier to compare poverty levels across the different median education levels because it places the facet split in columns, allowing a side-by-side comparison of poverty distributions within a consistent vertical space, which is more intuitive for spotting trends or differences. Faceting variables represent comparison factors with a manageable number of items. The choice of row versus column faceting thus depends on the number of levels in the faceting variable and the need for horizontal versus vertical alignment to enhance readability and comparison ease. In this case, vertical faceting is more pleasing.

```{r test_plots_3b}
ggplot(county %>% filter(!is.na(median_edu))) + 
    geom_point(aes(x = homeownership, y = poverty)) + 
    facet_grid(median_edu ~ .)

ggplot(county %>% filter(!is.na(median_edu))) + 
    geom_point(aes(x = homeownership, y = poverty)) + 
    facet_grid(. ~ median_edu)
```

### Part c

```{r subplot_3c_a}
plot_a <- ggplot(county, 
                 aes(x = homeownership,
                     y = poverty)) +

    geom_point() +
    labs(
        title = "Plot A"
    )
```

```{r subplot_3c_b}
plot_b <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty)) +

    geom_point() +
    geom_smooth(se = FALSE) +
    labs(
        title = "Plot B"
    )
```

```{r subplot_3c_c}
plot_c <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty)) +
    geom_point() +
    geom_smooth(data = subset(county, 
                              metro == "yes"), 
                show.legend = FALSE, 
                se = FALSE, 
                color = "green") +

    geom_smooth(data = subset(county, 
                              metro == "no"), 
                show.legend = FALSE, 
                se = FALSE, 
                color = "green") +

    labs(
        title = "Plot C"
    )
```

```{r subplot_3c_d}
plot_d <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty)) +

    geom_smooth(data = subset(county, 
                              metro == "yes"), 
                show.legend = FALSE, 
                se = FALSE, 
                color = "blue") +

    geom_smooth(data = subset(county, 
                              metro == "no"), 
                show.legend = FALSE, 
                se = FALSE, 
                color = "blue") +

    geom_point() +
    labs(
        title = "Plot D"
    )
```

```{r subplot_3c_e}
plot_e <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty, 
                     color = metro)) +

    geom_point(alpha = 0.6) +
    geom_smooth(aes(linetype = metro), 
                se = FALSE, 
                color = "blue") +

    labs(
        title = "Plot E"
    )
```

```{r subplot_3c_f}
plot_f <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty, 
                     color = metro)) +

    geom_point(alpha = 0.6) +
    geom_smooth(se = FALSE) +
    labs(
        title = "Plot F"
    )
```

```{r subplot_3c_g}
plot_g <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty, 
                     color = metro)) +

    geom_point(alpha = 0.6) +
    geom_smooth(se = FALSE, 
              color = "blue") +
    
    labs(
        title = "Plot G"
    )
```

```{r subplot_3c_h}
plot_h <- ggplot(county, 
                 aes(x = homeownership, 
                     y = poverty, 
                     color = metro)) +

    geom_point(alpha = 0.6, 
               size = 1) +

    labs(
        title = "Plot H"
    )
```

```{r plot_part_3c, fig.width=8, fig.height=8}
grid.arrange(
    plot_a, 
    plot_b, 
    plot_c, 
    plot_d,
    plot_e, 
    plot_f, 
    plot_g, 
    plot_h,
    ncol = 2
)
```

Found article on how to use `gridExtra::grid.arrange()` to display multiple plots in a grid layout [@sthda_ggplot2_scatter]. Another resource helped with understanding the various parameters for the smooth function [@ggplot2_geom_smooth].

## 4 - Rental apartments in SF

```{r 4_load_data}
credit <- read_csv("data/credit.csv")
glimpse(credit)
```

### Part a

```{r mutate_data_part_4a}
credit <- credit |>
    mutate( 
        student = factor(student, 
                         levels = c("No", 
                                    "Yes")), 
        
        married = factor(married, 
                         levels = c("No", 
                                    "Yes"))
    )
```

```{r plot_part_4a}
ggplot(credit, 
       aes(x = income, 
           y = balance, 
           color= student)) +

    geom_point(aes(shape = student), 
               alpha = 0.6, 
               size = 2, 
               show.legend = FALSE) +

    geom_smooth(method = "lm", 
                se = FALSE) +
    
    scale_y_continuous(breaks = seq(0, 2000, 
                                    by = 500), 
                       labels = sprintf("$%d", 
                                        seq(0, 2000, 
                                            by = 500))) +

    scale_x_continuous(breaks = seq(0, 200, 
                                    by = 50), 
                       labels = sprintf("$%dK", 
                                        seq(0, 200, 
                                            by = 50))) +
    
    facet_grid(student ~ married, 
               labeller = label_both) +

    labs(
        x = "Income",
        y = "Credit Card Balance",
        color = "Student",
        shape = "Student"
    ) +

    scale_color_manual(values = c("No" = "purple4", 
                                  "Yes" = "darkgreen")) +

    scale_shape_manual(values = c("No" = 16, 
                                  "Yes" = 17))
```

The faceted scatterplot above shows a positive relationship between income and credit card balance across all groups, where higher incomes generally corresponds to a higher overall balance. Non-students, especially married show increased credit balance with higher income, compared to students who tend to have lower balances at similar income levels, regardless of marital status. Unmarried students show the flattest trend. This could suggest that student status minimizes the relationship more than marital status.

### Part b

I think that the married, student, and income factors play a major role in basic pattern understanding for predicting credit-card balances. It is shown in the plots the trends corresponding to different spending quantities to balance quantities, differing between the married or student designations. A model could be made to predict this with some level of fidelity (noting that more data will improve this greatly).

### Part c

```{r mutate_data_part_4c}
credit <- credit |>
  mutate(
    credit_usage = balance / limit * 100
  )
```

```{r plot_part_4c}
ggplot(credit, 
       aes(x = income, 
           y = credit_usage, 
           color= student)) +

    geom_point(aes(shape = student), 
               alpha = 0.6, 
               size = 2, 
               show.legend = FALSE) +

    geom_smooth(method = "lm", 
                se = FALSE) +
    
    scale_y_continuous(breaks = seq(0, 30, 
                                    by = 10), 
                       labels = sprintf("%d%%", 
                                        seq(0, 30, 
                                            by = 10))) +
    scale_x_continuous(breaks = seq(0, 200, 
                                    by = 50), 
                       labels = sprintf("$%dK", 
                                        seq(0, 200, 
                                            by = 50))) +
    
    facet_grid(student ~ married, 
               labeller = label_both) +

    labs(
        x = "Income",
        y = "Credit Card Balance",
        color = "Student",
        shape = "Student"
    ) +

    scale_color_manual(values = c("No" = "purple4", 
                                  "Yes" = "darkgreen")) +

    scale_shape_manual(values = c("No" = 16, 
                                  "Yes" = 17))
```

### Part d

The plot shows that the relationship between income and credit utilization differs from the earlier credit balance relationship across student and marital statuses. Non-students, especially married ones, display a positive trend in utilization with rising income, while students show a flattened (or negative) trend, using a smaller amount of their limit as income increases, regardless of marital status.

In contrast, the previous plot shows a consistent positive balance increase for all groups, with non-students having higher balances and students having lower ones. This suggests that a student status is impacts the income-utilization relationship more, while marital status improves the effect among non-students for both sides.

## 5 - Napoleon’s march

```{r 5_load_data}
napoleon <- read_rds("data/napoleon.rds")
cities <- napoleon$cities
temperatures <- napoleon$temperatures
troops <- napoleon$troops

glimpse(cities)
glimpse(temperatures)
glimpse(troops)
```

### **Recreation Steps**

I found a good reference to recreating this famous plot [@heiss_minard_ggplot2], that helped with overall structure, but not

#### Movement Plot

I started with making an overall ggplot object, because different dataframes will need to be overlaid and used simultaneously. The first component to add was the `geom_path` object which allowed me to map lat/long positions of troop groups, and color the lines by direction of troop movement as part of the aesthetics mapping. I was also able to change the size of the troop lines based on the survivor count, and finally add the `lineend = "round"` argument to because without it, the line segments to not appear to be continuous, resulting in poor visuals.

The next object was the `geom_point`, with which I was able to set the data to use cities in order to plot the map region with respect to where cities are located. The aesthetics mapping uses only lat and long, ensuring an overlay on top of the first part (`geom_path`). The third object was a `geom_text`, which also used the city dataframe, but is for labeling the points now. The aesthetics mapping uses only lat and long again, but also the label set to the city values. From there, I was able to adjust the vertical placement of the label with `vjust` for offsetting the label from the point.

The last half of the code section for the movement plot is themes, scales, and labels. It was necessary to adjust the size scaling of the lines for the troops with `scale_size` to have them only grow and shrink to a mapping of 1-10 instead of the values of the data (which is a large number for scaling a line thickness). Then I map the colors specifically to tan and black with `scale_colour_manual`. Only the y-axis label gets a label, since the temperature plot below will have a x-axis label for the longitude. The gridlines are turned off for this plot (with an attempt made to use the longitude lines from the temperatures). In order to plot the 2 parts of this overall map together, I played with the margin an set the bottom margin to 0, to allow the 2 plots to stitch together nicely.

```{r napoleon_movement_plot, fig.width=8.5, fig.height=4.5}
movements_plot <- ggplot() +
    geom_path(data = troops, 
              aes(x = long, 
                  y = lat, 
                  group = group, 
                  color = direction, 
                  size = survivors), 
              lineend = "round") +
    
    geom_point(data = cities, 
               aes(x = long, 
                   y = lat)) +

    geom_text(data = cities, 
              aes(x = long, 
                  y = lat, 
                  label = city), 
              vjust = 1.5) +

    geom_vline(data = temperatures,
               aes(xintercept = long), 
               color = "grey60", 
               linetype = "dashed", 
               size = 0.3) +

    scale_size(range = c(1, 10)) +
    scale_colour_manual(values = c("tan", "darkgrey")) +
    labs(
        title = "Minard's 1812 Recreation",
        x = NULL, 
        y = "Latitude"
    ) +

    guides(color = FALSE, size = FALSE) +
    theme_minimal() +
    theme(
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        plot.margin = margin(1, 1, 0, 1, 'cm')
    )

movements_plot
```

#### Temperatures Plot

The temperature plot uses one overall aesthetic mapping based on the temperature data, mapping longitude versus temperature. I used the `geom_path` to create the temperature similarly to the movements plot, that way I can have the lines map to a color gradient for the temperature differences as well as have the lines grow in thickness as the temperature grows. I managed to plot the temperature values along the line using the `geom_text` function again, I needed to add the date as well, to do that I would need to create multiple aesthetic mappings as was done in the movements plot in order to utilize multiple dataframes. I adjusted the top margin on this plot to stitch below the movement plot.

After much time and exploring through the lecture videos more, I figured out that I could use a `geom_vline` to add a vertical component that I can add to both independent plots. I also learned that the vertical adjustment of text is like any other variable, and it can be modified at will, as I did with mutating and creating a new field based on the temperature case.

```{r napoleon_temp_plot, fig.width=8.5, fig.height=2}

temperatures <- temperatures |>
    mutate(
        temp_labels = glue("{temp} °C"),
        month_day = glue("{month}-{day}"),
        label_vjust = case_when(
          temp <= -15 ~ -1.0,   
          TRUE ~ 2.0 
        )
    )

temps_plot <- ggplot(data = temperatures, 
                     aes(x = long, 
                         y = temp)) +
    geom_path(aes(color = temp, 
                  size = temp),
              lineend = "round") + 
    
    geom_text(aes(label = temp_labels, 
              vjust = label_vjust)) +

    scale_color_gradient(low = "darkblue", 
                         high = "darkred", 
                         guide = "none") +

    scale_size(range = c(0.5, 3), 
               guide = "none") +

    geom_vline(aes(xintercept = long), 
               color = "grey60", 
               linetype = "dashed", 
               size = 0.3) +

    scale_x_continuous(
        name = "Longitude",
        sec.axis = sec_axis(
            trans = ~.,
            breaks = temperatures$long,
            labels = temperatures$month_day
        ),
        limits = c(min(troops$long), max(troops$long))
    ) +

    labs(y = "Temperature (°C)") +

    theme_minimal() +
    theme(
        plot.margin = margin(0, 1, 1, 1, 'cm'),
        axis.ticks.x = element_blank(),
        axis.text.x.top = element_text(angle = 90, vjust = 0.5),
        panel.grid.major.y = element_line(color = "grey80"),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank()
    )

temps_plot
```

#### Combination Plot

Combining the two plots was seamless after adjusting the margins (which took a bit of time to figure out). However, I had to scale the movement plot to take more height that the temperature plot, then ultimately add a border around the plot. Found help on merging plots and making borders [@R-ggplot2], [@R-gridExtra], [@R-grid].

```{r napoleon_combined_plot, fig.width=8.5, fig.height=6.5}
combo_plot <- grid.arrange(movements_plot,
                           temps_plot,
                           ncol = 1,
                           heights = c(2.25, 1)
                           )

grid.newpage()
grid.draw(combo_plot)
grid.rect(
    x = unit(0.5, "npc"),
    y = unit(0.5, "npc"),
    width = unit(1, "npc"),
    height = unit(1, "npc"),
    gp = gpar(col = "black", 
              fill = NA, 
              lwd = 1)
)
```